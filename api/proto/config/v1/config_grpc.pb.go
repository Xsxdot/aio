// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.11.1
// source: config/v1/config.proto

package configv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConfigService_GetConfig_FullMethodName        = "/config.v1.ConfigService/GetConfig"
	ConfigService_SetConfig_FullMethodName        = "/config.v1.ConfigService/SetConfig"
	ConfigService_DeleteConfig_FullMethodName     = "/config.v1.ConfigService/DeleteConfig"
	ConfigService_ListConfigs_FullMethodName      = "/config.v1.ConfigService/ListConfigs"
	ConfigService_GetConfigJSON_FullMethodName    = "/config.v1.ConfigService/GetConfigJSON"
	ConfigService_GetEnvConfig_FullMethodName     = "/config.v1.ConfigService/GetEnvConfig"
	ConfigService_SetEnvConfig_FullMethodName     = "/config.v1.ConfigService/SetEnvConfig"
	ConfigService_ListEnvConfig_FullMethodName    = "/config.v1.ConfigService/ListEnvConfig"
	ConfigService_GetEnvConfigJSON_FullMethodName = "/config.v1.ConfigService/GetEnvConfigJSON"
	ConfigService_GetHistory_FullMethodName       = "/config.v1.ConfigService/GetHistory"
	ConfigService_GetRevision_FullMethodName      = "/config.v1.ConfigService/GetRevision"
	ConfigService_GetComposite_FullMethodName     = "/config.v1.ConfigService/GetComposite"
	ConfigService_MergeComposite_FullMethodName   = "/config.v1.ConfigService/MergeComposite"
)

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ConfigService 配置中心服务
type ConfigServiceClient interface {
	// GetConfig 获取配置
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	// SetConfig 设置配置
	SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error)
	// DeleteConfig 删除配置
	DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*DeleteConfigResponse, error)
	// ListConfigs 列出所有配置
	ListConfigs(ctx context.Context, in *ListConfigsRequest, opts ...grpc.CallOption) (*ListConfigsResponse, error)
	// GetConfigJSON 获取JSON格式配置
	GetConfigJSON(ctx context.Context, in *GetConfigJSONRequest, opts ...grpc.CallOption) (*GetConfigJSONResponse, error)
	// GetEnvConfig 获取环境配置
	GetEnvConfig(ctx context.Context, in *GetEnvConfigRequest, opts ...grpc.CallOption) (*GetEnvConfigResponse, error)
	// SetEnvConfig 设置环境配置
	SetEnvConfig(ctx context.Context, in *SetEnvConfigRequest, opts ...grpc.CallOption) (*SetEnvConfigResponse, error)
	// ListEnvConfig 列出环境配置
	ListEnvConfig(ctx context.Context, in *ListEnvConfigRequest, opts ...grpc.CallOption) (*ListEnvConfigResponse, error)
	// GetEnvConfigJSON 获取环境JSON格式配置
	GetEnvConfigJSON(ctx context.Context, in *GetEnvConfigJSONRequest, opts ...grpc.CallOption) (*GetEnvConfigJSONResponse, error)
	// GetHistory 获取配置历史
	GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoryResponse, error)
	// GetRevision 获取特定版本配置
	GetRevision(ctx context.Context, in *GetRevisionRequest, opts ...grpc.CallOption) (*GetRevisionResponse, error)
	// GetComposite 获取组合配置
	GetComposite(ctx context.Context, in *GetCompositeRequest, opts ...grpc.CallOption) (*GetCompositeResponse, error)
	// MergeComposite 合并组合配置
	MergeComposite(ctx context.Context, in *MergeCompositeRequest, opts ...grpc.CallOption) (*MergeCompositeResponse, error)
}

type configServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigServiceClient(cc grpc.ClientConnInterface) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_SetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*DeleteConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_DeleteConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ListConfigs(ctx context.Context, in *ListConfigsRequest, opts ...grpc.CallOption) (*ListConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConfigsResponse)
	err := c.cc.Invoke(ctx, ConfigService_ListConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetConfigJSON(ctx context.Context, in *GetConfigJSONRequest, opts ...grpc.CallOption) (*GetConfigJSONResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfigJSONResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetConfigJSON_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetEnvConfig(ctx context.Context, in *GetEnvConfigRequest, opts ...grpc.CallOption) (*GetEnvConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEnvConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetEnvConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) SetEnvConfig(ctx context.Context, in *SetEnvConfigRequest, opts ...grpc.CallOption) (*SetEnvConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetEnvConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_SetEnvConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ListEnvConfig(ctx context.Context, in *ListEnvConfigRequest, opts ...grpc.CallOption) (*ListEnvConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEnvConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_ListEnvConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetEnvConfigJSON(ctx context.Context, in *GetEnvConfigJSONRequest, opts ...grpc.CallOption) (*GetEnvConfigJSONResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEnvConfigJSONResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetEnvConfigJSON_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHistoryResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetRevision(ctx context.Context, in *GetRevisionRequest, opts ...grpc.CallOption) (*GetRevisionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRevisionResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetComposite(ctx context.Context, in *GetCompositeRequest, opts ...grpc.CallOption) (*GetCompositeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCompositeResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetComposite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) MergeComposite(ctx context.Context, in *MergeCompositeRequest, opts ...grpc.CallOption) (*MergeCompositeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MergeCompositeResponse)
	err := c.cc.Invoke(ctx, ConfigService_MergeComposite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
// All implementations must embed UnimplementedConfigServiceServer
// for forward compatibility.
//
// ConfigService 配置中心服务
type ConfigServiceServer interface {
	// GetConfig 获取配置
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	// SetConfig 设置配置
	SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error)
	// DeleteConfig 删除配置
	DeleteConfig(context.Context, *DeleteConfigRequest) (*DeleteConfigResponse, error)
	// ListConfigs 列出所有配置
	ListConfigs(context.Context, *ListConfigsRequest) (*ListConfigsResponse, error)
	// GetConfigJSON 获取JSON格式配置
	GetConfigJSON(context.Context, *GetConfigJSONRequest) (*GetConfigJSONResponse, error)
	// GetEnvConfig 获取环境配置
	GetEnvConfig(context.Context, *GetEnvConfigRequest) (*GetEnvConfigResponse, error)
	// SetEnvConfig 设置环境配置
	SetEnvConfig(context.Context, *SetEnvConfigRequest) (*SetEnvConfigResponse, error)
	// ListEnvConfig 列出环境配置
	ListEnvConfig(context.Context, *ListEnvConfigRequest) (*ListEnvConfigResponse, error)
	// GetEnvConfigJSON 获取环境JSON格式配置
	GetEnvConfigJSON(context.Context, *GetEnvConfigJSONRequest) (*GetEnvConfigJSONResponse, error)
	// GetHistory 获取配置历史
	GetHistory(context.Context, *GetHistoryRequest) (*GetHistoryResponse, error)
	// GetRevision 获取特定版本配置
	GetRevision(context.Context, *GetRevisionRequest) (*GetRevisionResponse, error)
	// GetComposite 获取组合配置
	GetComposite(context.Context, *GetCompositeRequest) (*GetCompositeResponse, error)
	// MergeComposite 合并组合配置
	MergeComposite(context.Context, *MergeCompositeRequest) (*MergeCompositeResponse, error)
	mustEmbedUnimplementedConfigServiceServer()
}

// UnimplementedConfigServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConfigServiceServer struct{}

func (UnimplementedConfigServiceServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedConfigServiceServer) SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedConfigServiceServer) DeleteConfig(context.Context, *DeleteConfigRequest) (*DeleteConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfig not implemented")
}
func (UnimplementedConfigServiceServer) ListConfigs(context.Context, *ListConfigsRequest) (*ListConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigs not implemented")
}
func (UnimplementedConfigServiceServer) GetConfigJSON(context.Context, *GetConfigJSONRequest) (*GetConfigJSONResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigJSON not implemented")
}
func (UnimplementedConfigServiceServer) GetEnvConfig(context.Context, *GetEnvConfigRequest) (*GetEnvConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvConfig not implemented")
}
func (UnimplementedConfigServiceServer) SetEnvConfig(context.Context, *SetEnvConfigRequest) (*SetEnvConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnvConfig not implemented")
}
func (UnimplementedConfigServiceServer) ListEnvConfig(context.Context, *ListEnvConfigRequest) (*ListEnvConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnvConfig not implemented")
}
func (UnimplementedConfigServiceServer) GetEnvConfigJSON(context.Context, *GetEnvConfigJSONRequest) (*GetEnvConfigJSONResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvConfigJSON not implemented")
}
func (UnimplementedConfigServiceServer) GetHistory(context.Context, *GetHistoryRequest) (*GetHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistory not implemented")
}
func (UnimplementedConfigServiceServer) GetRevision(context.Context, *GetRevisionRequest) (*GetRevisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRevision not implemented")
}
func (UnimplementedConfigServiceServer) GetComposite(context.Context, *GetCompositeRequest) (*GetCompositeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComposite not implemented")
}
func (UnimplementedConfigServiceServer) MergeComposite(context.Context, *MergeCompositeRequest) (*MergeCompositeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeComposite not implemented")
}
func (UnimplementedConfigServiceServer) mustEmbedUnimplementedConfigServiceServer() {}
func (UnimplementedConfigServiceServer) testEmbeddedByValue()                       {}

// UnsafeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServiceServer will
// result in compilation errors.
type UnsafeConfigServiceServer interface {
	mustEmbedUnimplementedConfigServiceServer()
}

func RegisterConfigServiceServer(s grpc.ServiceRegistrar, srv ConfigServiceServer) {
	// If the following call pancis, it indicates UnimplementedConfigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConfigService_ServiceDesc, srv)
}

func _ConfigService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_SetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).SetConfig(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_DeleteConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).DeleteConfig(ctx, req.(*DeleteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ListConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ListConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ListConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ListConfigs(ctx, req.(*ListConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetConfigJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigJSONRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetConfigJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetConfigJSON_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetConfigJSON(ctx, req.(*GetConfigJSONRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetEnvConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetEnvConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetEnvConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetEnvConfig(ctx, req.(*GetEnvConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_SetEnvConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEnvConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).SetEnvConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_SetEnvConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).SetEnvConfig(ctx, req.(*SetEnvConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ListEnvConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnvConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ListEnvConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ListEnvConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ListEnvConfig(ctx, req.(*ListEnvConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetEnvConfigJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvConfigJSONRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetEnvConfigJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetEnvConfigJSON_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetEnvConfigJSON(ctx, req.(*GetEnvConfigJSONRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetHistory(ctx, req.(*GetHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetRevision(ctx, req.(*GetRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetComposite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompositeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetComposite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetComposite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetComposite(ctx, req.(*GetCompositeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_MergeComposite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeCompositeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).MergeComposite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_MergeComposite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).MergeComposite(ctx, req.(*MergeCompositeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigService_ServiceDesc is the grpc.ServiceDesc for ConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config.v1.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _ConfigService_GetConfig_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _ConfigService_SetConfig_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _ConfigService_DeleteConfig_Handler,
		},
		{
			MethodName: "ListConfigs",
			Handler:    _ConfigService_ListConfigs_Handler,
		},
		{
			MethodName: "GetConfigJSON",
			Handler:    _ConfigService_GetConfigJSON_Handler,
		},
		{
			MethodName: "GetEnvConfig",
			Handler:    _ConfigService_GetEnvConfig_Handler,
		},
		{
			MethodName: "SetEnvConfig",
			Handler:    _ConfigService_SetEnvConfig_Handler,
		},
		{
			MethodName: "ListEnvConfig",
			Handler:    _ConfigService_ListEnvConfig_Handler,
		},
		{
			MethodName: "GetEnvConfigJSON",
			Handler:    _ConfigService_GetEnvConfigJSON_Handler,
		},
		{
			MethodName: "GetHistory",
			Handler:    _ConfigService_GetHistory_Handler,
		},
		{
			MethodName: "GetRevision",
			Handler:    _ConfigService_GetRevision_Handler,
		},
		{
			MethodName: "GetComposite",
			Handler:    _ConfigService_GetComposite_Handler,
		},
		{
			MethodName: "MergeComposite",
			Handler:    _ConfigService_MergeComposite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config/v1/config.proto",
}
