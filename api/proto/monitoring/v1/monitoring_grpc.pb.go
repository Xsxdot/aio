// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.11.1
// source: monitoring/v1/monitoring.proto

package monitoringv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetricStorageService_StoreMetricPoints_FullMethodName   = "/monitoring.v1.MetricStorageService/StoreMetricPoints"
	MetricStorageService_StoreMetricProvider_FullMethodName = "/monitoring.v1.MetricStorageService/StoreMetricProvider"
	MetricStorageService_QueryMetricPoints_FullMethodName   = "/monitoring.v1.MetricStorageService/QueryMetricPoints"
	MetricStorageService_QueryTimeSeries_FullMethodName     = "/monitoring.v1.MetricStorageService/QueryTimeSeries"
	MetricStorageService_GetStorageNode_FullMethodName      = "/monitoring.v1.MetricStorageService/GetStorageNode"
)

// MetricStorageServiceClient is the client API for MetricStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MetricStorageService 定义指标存储服务
type MetricStorageServiceClient interface {
	// StoreMetricPoints 存储指标数据点
	StoreMetricPoints(ctx context.Context, in *StoreMetricPointsRequest, opts ...grpc.CallOption) (*StoreMetricPointsResponse, error)
	// StoreMetricProvider 存储实现了MetricProvider接口的数据
	StoreMetricProvider(ctx context.Context, in *StoreMetricProviderRequest, opts ...grpc.CallOption) (*StoreMetricProviderResponse, error)
	// QueryMetricPoints 查询指标数据点
	QueryMetricPoints(ctx context.Context, in *QueryMetricPointsRequest, opts ...grpc.CallOption) (*QueryMetricPointsResponse, error)
	// QueryTimeSeries 查询时间序列数据
	QueryTimeSeries(ctx context.Context, in *QueryTimeSeriesRequest, opts ...grpc.CallOption) (*QueryTimeSeriesResponse, error)
	// GetStorageNode 获取服务的存储节点分配
	GetStorageNode(ctx context.Context, in *GetStorageNodeRequest, opts ...grpc.CallOption) (*GetStorageNodeResponse, error)
}

type metricStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricStorageServiceClient(cc grpc.ClientConnInterface) MetricStorageServiceClient {
	return &metricStorageServiceClient{cc}
}

func (c *metricStorageServiceClient) StoreMetricPoints(ctx context.Context, in *StoreMetricPointsRequest, opts ...grpc.CallOption) (*StoreMetricPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreMetricPointsResponse)
	err := c.cc.Invoke(ctx, MetricStorageService_StoreMetricPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricStorageServiceClient) StoreMetricProvider(ctx context.Context, in *StoreMetricProviderRequest, opts ...grpc.CallOption) (*StoreMetricProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreMetricProviderResponse)
	err := c.cc.Invoke(ctx, MetricStorageService_StoreMetricProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricStorageServiceClient) QueryMetricPoints(ctx context.Context, in *QueryMetricPointsRequest, opts ...grpc.CallOption) (*QueryMetricPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMetricPointsResponse)
	err := c.cc.Invoke(ctx, MetricStorageService_QueryMetricPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricStorageServiceClient) QueryTimeSeries(ctx context.Context, in *QueryTimeSeriesRequest, opts ...grpc.CallOption) (*QueryTimeSeriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryTimeSeriesResponse)
	err := c.cc.Invoke(ctx, MetricStorageService_QueryTimeSeries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricStorageServiceClient) GetStorageNode(ctx context.Context, in *GetStorageNodeRequest, opts ...grpc.CallOption) (*GetStorageNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStorageNodeResponse)
	err := c.cc.Invoke(ctx, MetricStorageService_GetStorageNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricStorageServiceServer is the server API for MetricStorageService service.
// All implementations must embed UnimplementedMetricStorageServiceServer
// for forward compatibility.
//
// MetricStorageService 定义指标存储服务
type MetricStorageServiceServer interface {
	// StoreMetricPoints 存储指标数据点
	StoreMetricPoints(context.Context, *StoreMetricPointsRequest) (*StoreMetricPointsResponse, error)
	// StoreMetricProvider 存储实现了MetricProvider接口的数据
	StoreMetricProvider(context.Context, *StoreMetricProviderRequest) (*StoreMetricProviderResponse, error)
	// QueryMetricPoints 查询指标数据点
	QueryMetricPoints(context.Context, *QueryMetricPointsRequest) (*QueryMetricPointsResponse, error)
	// QueryTimeSeries 查询时间序列数据
	QueryTimeSeries(context.Context, *QueryTimeSeriesRequest) (*QueryTimeSeriesResponse, error)
	// GetStorageNode 获取服务的存储节点分配
	GetStorageNode(context.Context, *GetStorageNodeRequest) (*GetStorageNodeResponse, error)
	mustEmbedUnimplementedMetricStorageServiceServer()
}

// UnimplementedMetricStorageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetricStorageServiceServer struct{}

func (UnimplementedMetricStorageServiceServer) StoreMetricPoints(context.Context, *StoreMetricPointsRequest) (*StoreMetricPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreMetricPoints not implemented")
}
func (UnimplementedMetricStorageServiceServer) StoreMetricProvider(context.Context, *StoreMetricProviderRequest) (*StoreMetricProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreMetricProvider not implemented")
}
func (UnimplementedMetricStorageServiceServer) QueryMetricPoints(context.Context, *QueryMetricPointsRequest) (*QueryMetricPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMetricPoints not implemented")
}
func (UnimplementedMetricStorageServiceServer) QueryTimeSeries(context.Context, *QueryTimeSeriesRequest) (*QueryTimeSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTimeSeries not implemented")
}
func (UnimplementedMetricStorageServiceServer) GetStorageNode(context.Context, *GetStorageNodeRequest) (*GetStorageNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageNode not implemented")
}
func (UnimplementedMetricStorageServiceServer) mustEmbedUnimplementedMetricStorageServiceServer() {}
func (UnimplementedMetricStorageServiceServer) testEmbeddedByValue()                              {}

// UnsafeMetricStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricStorageServiceServer will
// result in compilation errors.
type UnsafeMetricStorageServiceServer interface {
	mustEmbedUnimplementedMetricStorageServiceServer()
}

func RegisterMetricStorageServiceServer(s grpc.ServiceRegistrar, srv MetricStorageServiceServer) {
	// If the following call pancis, it indicates UnimplementedMetricStorageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetricStorageService_ServiceDesc, srv)
}

func _MetricStorageService_StoreMetricPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreMetricPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricStorageServiceServer).StoreMetricPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricStorageService_StoreMetricPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricStorageServiceServer).StoreMetricPoints(ctx, req.(*StoreMetricPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricStorageService_StoreMetricProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreMetricProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricStorageServiceServer).StoreMetricProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricStorageService_StoreMetricProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricStorageServiceServer).StoreMetricProvider(ctx, req.(*StoreMetricProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricStorageService_QueryMetricPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMetricPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricStorageServiceServer).QueryMetricPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricStorageService_QueryMetricPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricStorageServiceServer).QueryMetricPoints(ctx, req.(*QueryMetricPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricStorageService_QueryTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTimeSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricStorageServiceServer).QueryTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricStorageService_QueryTimeSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricStorageServiceServer).QueryTimeSeries(ctx, req.(*QueryTimeSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricStorageService_GetStorageNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStorageNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricStorageServiceServer).GetStorageNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricStorageService_GetStorageNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricStorageServiceServer).GetStorageNode(ctx, req.(*GetStorageNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricStorageService_ServiceDesc is the grpc.ServiceDesc for MetricStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monitoring.v1.MetricStorageService",
	HandlerType: (*MetricStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreMetricPoints",
			Handler:    _MetricStorageService_StoreMetricPoints_Handler,
		},
		{
			MethodName: "StoreMetricProvider",
			Handler:    _MetricStorageService_StoreMetricProvider_Handler,
		},
		{
			MethodName: "QueryMetricPoints",
			Handler:    _MetricStorageService_QueryMetricPoints_Handler,
		},
		{
			MethodName: "QueryTimeSeries",
			Handler:    _MetricStorageService_QueryTimeSeries_Handler,
		},
		{
			MethodName: "GetStorageNode",
			Handler:    _MetricStorageService_GetStorageNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "monitoring/v1/monitoring.proto",
}
